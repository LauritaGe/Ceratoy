#include "Arduino.h"
#include "DFRobotDFPlayerMini.h"

#if (defined(ARDUINO_AVR_UNO) || defined(ESP8266))   // Using a soft serial port
#include <SoftwareSerial.h>
SoftwareSerial softSerial(/*rx =*/10, /*tx =*/11);
#define FPSerial softSerial
#else
#define FPSerial Serial1
#endif

DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

#define BUTTON_PIN 4
#define LED_PIN 13
#define LED_BRIGHTNESS 150  // Ajusta el valor de brillo (0-255)

bool isPlaying = false;  // Variable para rastrear el estado de la música
int currentTrack = 0;    // Variable para almacenar la pista actual
const unsigned long TRACK_DURATION = 18000;  

void setup() {
#if (defined ESP32)
  FPSerial.begin(9600, SERIAL_8N1, /*rx =*/D3, /*tx =*/D2);
#else
  FPSerial.begin(9600);
#endif

  Serial.begin(115200);

  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));

  if (!myDFPlayer.begin(FPSerial, /*isACK = */true, /*doReset = */true)) {  // Use serial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while(true){
      delay(0); // Code to compatible with ESP8266 watch dog.
    }
  }
  Serial.println(F("DFPlayer Mini online."));

  myDFPlayer.volume(20);  // Set volume value. From 0 to 30

  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Configura el pin del botón como entrada con resistencia pull-up interna
  pinMode(LED_PIN, OUTPUT);           // Configura el pin del LED como salida
}

void loop() {
  byte buttonState = digitalRead(BUTTON_PIN);
  
  if (buttonState == LOW) {  // LOW significa que el botón está presionado
    Serial.println("Botón Pulsado");
    analogWrite(LED_PIN, LED_BRIGHTNESS);  // Ajusta el brillo del LED
    
    if (!isPlaying) {
      int totalTracks = 50;  // Cambia esto por el número total de canciones en tu tarjeta SD
      currentTrack = random(1, totalTracks + 1);  // Selecciona una canción aleatoria
      myDFPlayer.play(currentTrack);  // Reproduce la canción seleccionada
      isPlaying = true;
    }
  } else {
    Serial.println("El botón no está pulsado");
    analogWrite(LED_PIN, 0);   // Apaga el LED
    
    if (isPlaying) {
      myDFPlayer.stop();  // Detiene la reproducción
      isPlaying = false;
    }
  }
  delay(100);  // Pequeña pausa para evitar múltiples lecturas rápidas

  if (myDFPlayer.available()) {
    printDetail(myDFPlayer.readType(), myDFPlayer.read()); // Print the detail message from DFPlayer to handle different errors and states.
  }
}

void printDetail(uint8_t type, int value){
  switch (type) {
    case TimeOut:
      Serial.println(F("Time Out!"));
      break;
    case WrongStack:
      Serial.println(F("Stack Wrong!"));
      break;
    case DFPlayerCardInserted:
      Serial.println(F("Card Inserted!"));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F("Card Removed!"));
      break;
    case DFPlayerCardOnline:
      Serial.println(F("Card Online!"));
      break;
    case DFPlayerUSBInserted:
      Serial.println("USB Inserted!");
      break;
    case DFPlayerUSBRemoved:
      Serial.println("USB Removed!");
      break;
    case DFPlayerPlayFinished:
      Serial.print(F("Number:"));
      Serial.print(value);
      Serial.println(F(" Play Finished!"));
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Card not found"));
          break;
        case Sleeping:
          Serial.println(F("Sleeping"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Cannot Find File"));
          break;
        case Advertise:
          Serial.println(F("In Advertise"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}
